{"version":3,"sources":["assets/image/wallet-background.png","constant/explorer/index.js","components/Popup/TransactionLog.js","components/accounts/deposit/index.js","components/accounts/withdraw/index.js","components/common/pagination/Pagination.js","components/accounts/index.js","containers/accounts/index.js","constant/index.js"],"names":["explorer","TransactionLog","id","showModal","handleCloseModal","tx","ctx","useContext","ModalContext","chainId","useWeb3React","console","log","useEffect","setIsModalOpen","Modal","centered","show","onHide","className","Header","closeButton","Title","Body","transactionType","src","WalletBackGround","alt","status","toLowerCase","amountReceived","text","fromAddress","substring","length","toAddress","format","Date","timestamp","now","toString","href","target","rel","Deposit","network","setNetwork","useState","copied","message","copyMessage","setCopyMessage","REACT_APP_ENVIRONMENT","process","size","value","systemDepositWallet","OverlayTrigger","placement","overlay","Tooltip","onCopy","Button","Withdraw","addTransaction","recipientRef","useRef","valueRef","user","useSelector","selectCurrentUser","setAmountReceived","inputValue","setInputValue","withdrawKaby","a","signRandomMessage","sign","body","current","Number","networkId","header","data","signature","userAPI","addWithdrawTransaction","res","toast","info","NOTIFY","SUCCESS","default","amount","from","fee","to","withdraw","transactionHash","error","ERROR","Form","Label","InputGroup","FormControl","ref","defaultValue","address","disabled","onKeyPress","event","test","key","preventDefault","onInput","handleInput","type","onClick","Pagination","props","setPaginationArray","totalPage","currentPage","tmp","active","slice","pagination","setPagination","setCurrentPage","setTotalPage","handlePageChange","map","pagi","index","Fragment","style","color","deposit","networkType","pageInit","pageSize","pageNumber","loading","totalItem","AccountPage","dispatch","useDispatch","account","rowNum","setLog","transfers","setTransfers","action","setAction","tBodyRef","emitterRef","listen","getAllTransactions","Accounts","Math","ceil","transfer","setCurrentUser","unshift","getInfoWallet","getContractAsync","getKabyGameTokenAddress","token","getKabyGameTokenABI","KABY_GAME_TOKEN_ABI","tokenContract","contract","unsubscribe","events","Transfer","filter","received","on","returnValues","find","e","push","Web3","utils","fromWei","Row","cursor","rows","item","page","AccountContainer","formatNumber","num","toFixed","replace","c","i","split","WARNING","LOGIN","LOAD_DATA","APPROVING","APPROVED","OK","CANCEL_OFFER","OFFER","TAKE_OFFER","DELIST","LIST","BUY","ITEMBUY","ITEMLIST","ITEMDELIST","STAKE","UNSTAKE","CLAIM_REWARD","WITHDRAW","LOAD_APPROVE_ERROR"],"mappings":"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","file":"static/js/YEv5XG.bab2e4.16.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/RMSOFq.5d8916.wallet-background.png\";","export const explorer = {\n  56: 'https://bscscan.com',\n  97: 'https://testnet.bscscan.com',\n}\n","import React, { useContext, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Modal } from 'react-bootstrap'\nimport './popup.scss'\nimport WalletBackGround from 'assets/image/wallet-background.png'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport Moment from 'react-moment'\nimport { explorer } from 'constant/explorer'\nimport ModalContext from 'containers/layout/NewAppLayout'\nconst TransactionLog = ({ showModal, handleCloseModal, tx }) => {\n  const ctx = useContext(ModalContext)\n  const { chainId } = useWeb3React()\n  const transactionExplorer = (id) => {\n    return `${explorer[chainId]}/tx/${id}`\n  }\n  console.log(tx)\n  useEffect(() => {\n    ctx.setIsModalOpen(showModal)\n  }, [showModal])\n  return (\n    <Modal centered show={showModal} onHide={handleCloseModal} className=\"modal-chose-wallet\">\n      <div className=\"custom-popup\">\n        <Modal.Header closeButton>\n          <Modal.Title> </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\" transaction-log\">\n            <h1> {tx?.transactionType} transaction</h1>\n            <div className=\"image-log\">\n              <img src={WalletBackGround} alt=\"wallet bg\" />\n            </div>\n            <div className=\"transaction-status\">\n              <h6>\n                Transaction {tx?.status.toLowerCase() === 'success' ? 'Succeeded' : 'Failed'}{' '}\n              </h6>\n              <div>\n                {' '}\n                {tx?.transactionType.toLowerCase() === 'deposit' ? '+' : '-'} {tx?.amountReceived}{' '}\n                KGT{' '}\n              </div>\n            </div>\n            <div className=\"transaction-info\">\n              <ul>\n                <li>\n                  <h6>Sender</h6>\n                  <CopyToClipboard text={tx?.fromAddress}>\n                    <p>\n                      {`${tx?.fromAddress.substring(0, 8)}...${tx?.fromAddress.substring(\n                        tx?.fromAddress.length - 4\n                      )}`}\n                    </p>\n                  </CopyToClipboard>\n                </li>\n                <li>\n                  <h6>Recipient </h6>\n                  <CopyToClipboard text={tx?.toAddress}>\n                    <p>\n                      {`${tx?.toAddress.substring(0, 8)}...${tx?.toAddress.substring(\n                        tx?.toAddress.length - 4\n                      )}`}{' '}\n                    </p>\n                  </CopyToClipboard>\n                </li>\n                <li>\n                  <h6>Time</h6>\n                  <p>\n                    <Moment format=\"YYYY-MM-DD h:mm:ss\">\n                      {new Date(tx?.timestamp || Date.now()).toString()}\n                    </Moment>\n                  </p>\n                </li>\n                <li>\n                  <h6> Transaction ID </h6>\n                  <CopyToClipboard text={tx?.tx}>\n                    <a href={transactionExplorer(tx?.tx)} target=\"_blank\" rel=\"noreferrer\">\n                      {`${tx?.tx.substring(0, 8)}...${tx?.tx.substring(tx?.tx.length - 4)}`}\n                    </a>\n                  </CopyToClipboard>\n                </li>\n                {/* {tx?.transactionType.toLowerCase() === \"withdraw\" && (\n                  <li>\n                    <h6>Transaction Fee</h6>\n                    <p> {tx?.fee || 0} </p>\n                  </li>\n                )} */}\n              </ul>\n            </div>\n          </div>\n          <div className=\"divider-end\"></div>\n        </Modal.Body>\n      </div>\n    </Modal>\n  )\n}\n\nexport default TransactionLog\n","import { systemDepositWallet, systemDepositWalletProduction } from 'constant/contract/usersSystem'\nimport QrCode from 'qrcode.react'\nimport React, { useState } from 'react'\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n// import { networkType } from \"..\";\nconst Deposit = ({ network, setNetwork }) => {\n  const [copyMessage, setCopyMessage] = useState({\n    copied: false,\n    message: '',\n  })\n  const { REACT_APP_ENVIRONMENT } = process.env\n  console.log(REACT_APP_ENVIRONMENT)\n  return (\n    <div className=\"column-flex-center \">\n      <div className=\"column-flex-center \">\n        {/* <h1 className=\"wallet-action-title\" id=\"title-quick-deposit\">\n          quick deposit\n        </h1> */}\n        {/* <div className=\"network\">\n          <Button\n            onClick={() => setNetwork(networkType.bsc)}\n            className={\n              network === networkType.bsc\n                ? \"color-btn wallet-action-btn\"\n                : \"wallet-action-btn\"\n            }\n          >\n            BSC\n          </Button>\n          <Button\n            onClick={() => setNetwork(networkType.polygon)}\n            className={\n              network === networkType.polygon\n                ? \"color-btn wallet-action-btn\"\n                : \"wallet-action-btn\"\n            }\n          >\n            polygon\n          </Button>\n        </div> */}\n      </div>\n      <div className=\"system-address\">\n        <QrCode\n          size={200}\n          value={\n            REACT_APP_ENVIRONMENT === 'development'\n              ? systemDepositWallet\n              : systemDepositWalletProduction\n          }\n        />\n        <div className=\"text-address column-flex-center\">\n          <h6>\n            {REACT_APP_ENVIRONMENT === 'development'\n              ? systemDepositWallet\n              : systemDepositWalletProduction}\n          </h6>\n          <p>\n            Note: Address only accepts <strong>KGT</strong>{' '}\n          </p>\n          <OverlayTrigger\n            key={'top'}\n            placement={'top'}\n            overlay={<Tooltip id={`tooltip-${'top'}`}>{copyMessage.message}</Tooltip>}\n          >\n            <CopyToClipboard\n              onCopy={() => setCopyMessage({ copied: true, message: 'copied' })}\n              text={\n                REACT_APP_ENVIRONMENT === 'development'\n                  ? systemDepositWallet\n                  : systemDepositWalletProduction\n              }\n            >\n              <Button className=\"wallet-action-btn color-btn mt-4\">copy address</Button>\n            </CopyToClipboard>\n          </OverlayTrigger>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Deposit\n","import React, { useRef, useState } from 'react'\nimport { Button, Form, FormControl, InputGroup } from 'react-bootstrap'\nimport userAPI from 'actions/accounts'\nimport { toast } from 'react-toastify'\nimport { NOTIFY } from 'constant'\nimport { useSelector } from 'react-redux'\nimport { selectCurrentUser } from 'redux/user/user.selectors'\n// import { networkType } from \"../index\";\nimport { signRandomMessage } from 'services/contracts/accounts'\nconst Withdraw = ({ network, setNetwork, addTransaction, transactionType }) => {\n  const recipientRef = useRef(null)\n  const valueRef = useRef(null)\n  const user = useSelector(selectCurrentUser)\n  console.log(user)\n  const [, setAmountReceived] = useState(0)\n  const [inputValue, setInputValue] = useState(null)\n  const handleInput = (event) => {\n    console.log(event)\n    console.log(event.target.value)\n    if (+event.target.value === 0) {\n      console.log('da chay')\n      setInputValue('')\n    } else {\n      setInputValue(event.target.value)\n    }\n  }\n  const withdrawKaby = async () => {\n    try {\n      const sign = await signRandomMessage()\n      const body = {\n        toAddress: recipientRef.current.value,\n        value: Number(valueRef.current.value),\n        networkId: network,\n      }\n      const header = {\n        sign: sign.data?.signature,\n        message: sign.data?.message,\n      }\n      const res = await userAPI.addWithdrawTransaction(header, body)\n      if (res.status === 'success') {\n        toast.info(NOTIFY.SUCCESS.default)\n        addTransaction({\n          amount: res.data?.amountReceived,\n          from: res.data?.fromAddress,\n          fee: res.data?.fee,\n          to: res.data?.toAddress,\n          transactionType: transactionType.withdraw,\n          transactionHash: res.data?.tx,\n        })\n        setAmountReceived(res.data?.amountReceived)\n      } else {\n        toast.error(res.data)\n      }\n    } catch (e) {\n      console.error(e)\n      toast.error(NOTIFY.ERROR.default)\n    }\n  }\n\n  return (\n    <div className=\"column-flex-center  \">\n      <div className=\"column-flex-left width-600 \"></div>\n      <div className=\"system-address\">\n        <div className=\" column-flex-right\">\n          <Form>\n            <Form.Label> Recipient </Form.Label>\n            <InputGroup>\n              <FormControl ref={recipientRef} defaultValue={user?.address} disabled />\n            </InputGroup>\n          </Form>\n          <Form>\n            <Form.Label> Amount (2000 - 100000 KGT) </Form.Label>\n            <InputGroup>\n              <FormControl\n                onKeyPress={(event) => {\n                  if (!/[0-9]/.test(event.key) || event.target.value === 0) {\n                    event.preventDefault()\n                  }\n                }}\n                onInput={(event) => handleInput(event)}\n                value={inputValue}\n                type=\"number\"\n                ref={valueRef}\n              />\n            </InputGroup>\n          </Form>\n          <div className=\"column-flex-right-children\">\n            <span>FEES: 60 KGT</span>\n            {/* <span>Amount Received : {amountReceived} KGT</span> */}\n            <Button onClick={withdrawKaby} className=\"wallet-action-btn color-btn mt-3\">\n              Send\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Withdraw\n","import React, { useEffect, useState } from 'react'\nimport './pagination.scss'\nconst Pagination = (props) => {\n  const setPaginationArray = (totalPage, currentPage) => {\n    if (totalPage === 0) {\n      return []\n    }\n    let tmp = [\n      {\n        value: 1,\n        active: false,\n      },\n      {\n        value: 2,\n        active: false,\n      },\n      {\n        value: 3,\n        active: false,\n      },\n      {\n        value: 4,\n        active: false,\n      },\n      {\n        value: 5,\n        active: false,\n      },\n      {\n        value: 6,\n        active: false,\n      },\n      {\n        value: 7,\n        active: false,\n      },\n    ]\n    if (totalPage <= 7) {\n      tmp = tmp.slice(0, +totalPage)\n      if (tmp[currentPage - 1]) {\n        tmp[currentPage - 1].active = true\n      } else {\n        tmp[0].active = true\n      }\n      return tmp\n    }\n    if (+currentPage < 5) {\n      tmp[currentPage - 1].active = true\n      tmp[5].value = '...'\n      tmp[6].value = totalPage\n      return tmp\n    }\n    if (+currentPage + 4 > +totalPage) {\n      tmp[1].value = '...'\n      tmp[6].value = totalPage\n      tmp[5].value = +totalPage - 1\n      tmp[4].value = +totalPage - 2\n      tmp[3].value = +totalPage - 3\n      tmp[2].value = +totalPage - 4\n      if (tmp[6 - totalPage + currentPage]) {\n        tmp[6 - totalPage + currentPage].active = true\n      } else {\n        tmp[0].active = true\n      }\n      return tmp\n    }\n    tmp[1].value = '...'\n    tmp[2].value = +currentPage - 1\n    tmp[3].value = currentPage\n    tmp[4].value = +currentPage + 1\n    tmp[5].value = '...'\n    tmp[6].value = totalPage\n    tmp[3].active = true\n    return tmp\n  }\n  const [pagination, setPagination] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPage, setTotalPage] = useState(props.totalPage)\n  useEffect(() => {\n    setPagination(() => {\n      return setPaginationArray(props.totalPage, props.currentPage)\n    })\n    setTotalPage(props.totalPage)\n    setCurrentPage(props.currentPage)\n  }, [props.totalPage, props.currentPage])\n  return (\n    <div className=\"common-pagination\">\n      <span\n        onClick={() => {\n          if (currentPage === 1) {\n            return\n          }\n          setPagination(() => {\n            return setPaginationArray(totalPage, +currentPage - 1)\n          })\n          setCurrentPage(+currentPage - 1)\n          props.handlePageChange(currentPage - 1)\n        }}\n        className=\"common-pagination-button\"\n      >\n        PREV\n      </span>\n      {pagination.map((pagi, index) => (\n        <React.Fragment key={`common-pagination${index}`}>\n          <span\n            value={pagi.value}\n            onClick={() => {\n              if (pagi.value === '...') {\n                return\n              }\n              setCurrentPage(pagi.value)\n              setPagination(() => {\n                return setPaginationArray(totalPage, +pagi.value)\n              })\n              props.handlePageChange(pagi.value)\n            }}\n            style={{ color: pagi.active && 'yellow' }}\n            className=\"common-pagination-page\"\n          >\n            {pagi.value}\n          </span>\n        </React.Fragment>\n      ))}\n\n      <span\n        onClick={() => {\n          if (+currentPage >= totalPage) {\n            return\n          }\n          setPagination(() => {\n            return setPaginationArray(totalPage, +currentPage + 1)\n          })\n\n          setCurrentPage(+currentPage + 1)\n          props.handlePageChange(currentPage + 1)\n        }}\n        className=\"common-pagination-button\"\n      >\n        NEXT\n      </span>\n    </div>\n  )\n}\nexport default Pagination\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentUser } from 'redux/user/user.actions'\nimport { selectCurrentUser } from 'redux/user/user.selectors'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Row } from 'react-bootstrap'\nimport Moment from 'react-moment'\nimport TableScrollbar from 'react-table-scrollbar'\nimport TransactionLog from 'components/Popup/TransactionLog'\nimport Accounts from 'actions/accounts'\nimport './accounts.scss'\nimport Deposit from './deposit'\nimport Withdraw from './withdraw'\nimport { getKabyGameTokenAddress, getKabyGameTokenABI } from 'constant/contract/kabyGameToken'\nimport { getInfoWallet } from 'services/contracts/wallet'\nimport { systemDepositWallet, systemDepositWalletProduction } from 'constant/contract/usersSystem'\nimport Web3 from 'web3'\nimport Pagination from 'components/common/pagination/Pagination'\nconst transactionType = {\n  deposit: 'deposit',\n  withdraw: 'withdraw',\n}\n\nexport const networkType = {\n  bsc: 1,\n  polygon: 0,\n}\nconst pageInit = {\n  networkId: networkType.bsc,\n  pageSize: 10,\n  pageNumber: 1,\n  loading: true,\n  totalItem: 10,\n}\n\nconst AccountPage = (props) => {\n  const dispatch = useDispatch()\n  const user = useSelector(selectCurrentUser)\n  const [network, setNetwork] = useState(networkType.bsc)\n  const { account } = useWeb3React()\n  const [rowNum] = useState(5)\n  const [log, setLog] = useState(-1)\n  const [transfers, setTransfers] = useState([])\n\n  const [pagination, setPagination] = useState(pageInit)\n  const [action, setAction] = useState(transactionType.deposit)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPage, setTotalPage] = useState(1)\n  // const [isPageChange, setIsPageChange] = useState(false);\n  const tBodyRef = useRef()\n  const emitterRef = useRef(null)\n  const { REACT_APP_ENVIRONMENT } = process.env\n  useEffect(() => {\n    // const handleBottomScroll = async () => {\n    //   if (tBodyRef.current) {\n    //     const { scrollTop, scrollHeight, clientHeight } =\n    //       tBodyRef.current?.container;\n    //     tBodyRef.current.tableclone.style.top = scrollTop + \"px\";\n\n    //     if (\n    //       scrollTop &&\n    //       scrollTop + clientHeight === scrollHeight &&\n    //       pagination.loading\n    //     ) {\n    //       const res = await Accounts.getAllTransactions({\n    //         networkId: network,\n    //         pageSize: pagination.pageSize,\n    //         pageNumber: pagination.pageNumber + 1,\n    //         transactionType: action,\n    //         address: account,\n    //       });\n\n    //       const data = [...transfers, ...res.data?.data];\n    //       if (data.length <= res.data.pagination.totalItem) setTransfers(data);\n    //       const newPageInfo = {\n    //         ...pagination,\n    //         pageNumber: pagination.pageNumber + 1,\n    //       };\n    //       if (data.length < res.data.pagination.totalItem) {\n    //       } else {\n    //         newPageInfo.loading = false;\n    //       }\n    //       setPagination(newPageInfo);\n    //     }\n    //   }\n    // };\n    // if (!transfers.length) return;\n\n    // const nodeRef = tBodyRef.current;\n    // if (nodeRef) {\n    //   ReactDOM.findDOMNode(nodeRef)?.addEventListener(\n    //     \"scroll\",\n    //     handleBottomScroll,\n    //   );\n    // }\n    listen()\n  }, [transfers, pagination, network, account]); // eslint-disable-line\n\n  useEffect(() => {\n    getAllTransactions(1)\n    setCurrentPage(1)\n  }, [action, user]); // eslint-disable-line\n  // useEffect(() => {\n  //   if (!isPageChange) {\n  //     return;\n  //   }\n  //   getAllTransactions(1);\n  //   setCurrentPage(1);\n  // }, [transfers]); // eslint-disable-line\n  // useEffect(() => {\n  //   getAllTransactions(currentPage);\n  // }, [currentPage]); // eslint-disable-line\n  // useEffect(()=>{})\n  const getAllTransactions = async (currentPage) => {\n    try {\n      const res = await Accounts.getAllTransactions({\n        networkId: network,\n        pageSize: pageInit.pageSize,\n        pageNumber: currentPage,\n        transactionType: action,\n        address: account,\n      })\n      if (res.status === 'success') {\n        setTransfers([...res.data?.data])\n        setPagination({\n          pageNumber: res.data?.pagination.pageNumber,\n          pageSize: pageInit.pageSize,\n          totalItem: res.data?.pagination.totalItem,\n          loading: pageInit.pageSize < res.data?.pagination.totalItem,\n        })\n        setTotalPage(Math.ceil(res.data?.pagination.totalItem / pageInit.pageSize))\n      }\n    } catch (e) {}\n  }\n  const handlePageChange = (page) => {\n    getAllTransactions(page)\n    setCurrentPage(page)\n  }\n  const addTransaction = (data) => {\n    const transfer = {\n      amountReceived: data.amount,\n      fee: data.fee || transfers[0]?.fee || 0,\n      fromAddress: data.from,\n      networkId: network,\n      status: 'SUCCESS',\n      timestamp: Date.now(),\n      toAddress: data.to,\n      transactionType: data.transactionType,\n      tx: data.transactionHash,\n    }\n    if (transactionType.deposit === transfer.transactionType) {\n      dispatch(\n        setCurrentUser({\n          ...user,\n          amount: +user?.amount + +transfer?.amountReceived - transfer.fee,\n        })\n      )\n    } else {\n      dispatch(\n        setCurrentUser({\n          ...user,\n          amount: user?.amount - transfer?.amountReceived - transfer.fee,\n        })\n      )\n    }\n    transfers.unshift(transfer)\n    setTransfers([...transfers])\n  }\n\n  const listen = async () => {\n    const { chainId, getContractAsync } = await getInfoWallet()\n    const token = await getKabyGameTokenAddress(chainId)\n    const { contract: tokenContract } = await getContractAsync(\n      token,\n      getKabyGameTokenABI(chainId).KABY_GAME_TOKEN_ABI\n    )\n    if (emitterRef.current) {\n      emitterRef.current.unsubscribe()\n    }\n    if (action !== transactionType.deposit) {\n      emitterRef.current = null\n      return\n    }\n    emitterRef.current = tokenContract.events.Transfer({\n      filter: {\n        from: account,\n        to:\n          REACT_APP_ENVIRONMENT === 'development'\n            ? systemDepositWallet\n            : systemDepositWalletProduction,\n      },\n    })\n    const received = []\n    emitterRef.current.on('data', (event) => {\n      const { value, from, to } = event.returnValues\n      console.log('Receive event', event)\n      const existed = received.find(\n        (e) => e.transactionHash === event.transactionHash && e.id === event.id\n      )\n      if (existed) {\n        return\n      }\n      received.push(event)\n      addTransaction({\n        amount: Web3.utils.fromWei(value),\n        from,\n        to: to,\n        transactionType: transactionType.deposit,\n        transactionHash: event.transactionHash,\n      })\n    })\n  }\n\n  return (\n    <>\n      {account && (\n        <TransactionLog\n          tx={transfers[log] || null}\n          showModal={log >= 0}\n          handleCloseModal={() => setLog(-1)}\n        />\n      )}\n      <div className=\"account-wrapper\">\n        <div className=\"bg-fade-layer1\"></div>\n        <div className=\"bg-fade-layer2\"></div>\n        <div className=\"bg-fade-layer3\"></div>\n        <div className=\"bg-head\"></div>\n        <div className=\"account-tab\">\n          <Row className=\"system-action\">\n            <div className=\"wallet-action\">\n              <div className=\"wallet-action-wrap\">\n                <h2\n                  style={{ cursor: 'pointer' }}\n                  onClick={() => setAction(transactionType.deposit)}\n                  className={`wallet-action-title ${\n                    action === transactionType.deposit ? 'active' : ''\n                  }`}\n                >\n                  Deposit\n                </h2>\n                <h2\n                  style={{ cursor: 'pointer' }}\n                  onClick={() => setAction(transactionType.withdraw)}\n                  className={`wallet-action-title ${\n                    action === transactionType.withdraw ? 'active' : ''\n                  }`}\n                >\n                  withdraw\n                </h2>\n              </div>\n              {action === transactionType.withdraw && (\n                <Withdraw\n                  network={network}\n                  setNetwork={setNetwork}\n                  addTransaction={addTransaction}\n                  transactionType={transactionType}\n                />\n              )}\n              {action === transactionType.deposit && (\n                <Deposit network={network} setNetwork={setNetwork} />\n              )}\n            </div>\n          </Row>\n          <div className=\"system-transaction\">\n            {/* <div className=\"title-table\">TRANSACTION HISTORY</div> */}\n            <TableScrollbar ref={tBodyRef} rows={rowNum} className=\"TableScrollbar\">\n              <table>\n                <thead>\n                  <tr>\n                    {/* <th className=\"th1\">TRANSACTION TYPE</th>\n                    <th>TOTAL AMOUNT</th>\n                    <th>TRANSACTION TIME</th>\n                    <th>STATUS</th>\n                    <th>DETAILS</th> */}\n                    <th className=\"th1\">TYPE</th>\n                    <th className=\"th2\">TOTAL AMOUNT</th>\n                    <th>TIME</th>\n                    <th>STATUS</th>\n                    <th>DETAILS</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {transfers?.map((item, index) => (\n                    <tr key={`row-transaction-${index}`}>\n                      <td className=\"td1 capitalize\">{item.transactionType}</td>\n                      <td className=\"th2\"> {item.amountReceived}</td>\n                      <td>\n                        <Moment format=\"YYYY-MM-DD h:mm:ss\">\n                          {new Date(item.timestamp).toString()}\n                        </Moment>\n                      </td>\n                      <td className=\"capitalize\"> {item.status?.toLowerCase()} </td>\n                      <td>\n                        <Button className=\"more-btn\" onClick={() => setLog(index)}>\n                          More\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </TableScrollbar>\n            <Pagination\n              handlePageChange={handlePageChange}\n              currentPage={currentPage}\n              totalPage={totalPage}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default AccountPage\n","import AccountPage from 'components/accounts'\nimport React from 'react'\n\nconst AccountContainer = (props) => {\n  return (\n    <>\n      <AccountPage />\n    </>\n  )\n}\n\nexport default AccountContainer\n","export const formatNumber = (num) => {\n  const tmp = num.toFixed(2).replace(/./g, function (c, i, a) {\n    return i > 0 && c !== '.' && (a.length - i) % 3 === 0 ? ',' + c : c\n  })\n\n  return `${tmp}`.split('.')[0]\n}\n\nexport const NOTIFY = {\n  WARNING: {\n    LOGIN: 'You must connect wallet first !',\n    LOAD_DATA: 'waiting to load data !',\n    APPROVING: 'Approving',\n    default: 'Have a transaction is pending!',\n  },\n  SUCCESS: {\n    APPROVED: 'Approve successful!',\n    OK: 'OK !',\n    CANCEL_OFFER: 'Cancel Offer Successful!',\n    OFFER: 'Offered Successful!',\n    TAKE_OFFER: 'Accepted Offer!',\n    DELIST: 'Delist Hero Successful!',\n    LIST: 'List Hero Successful!',\n    BUY: 'Bought Hero Successful!',\n    default: 'Transaction is successful!',\n    ITEMBUY: 'Bough Item Successful!',\n    ITEMLIST: 'List Item Successful!',\n    ITEMDELIST: 'Delist Item Successful!',\n    STAKE: 'Stake Token Successful!',\n    UNSTAKE: 'Unstake Token Successful!',\n    CLAIM_REWARD: 'Claim reward Successful!',\n    WITHDRAW: 'Withdraw Successful!',\n  },\n  ERROR: {\n    default: 'ERROR !',\n    LOAD_APPROVE_ERROR: 'Loading Approve info is error !',\n  },\n}\n\nexport const UnlockDay = new Date('10/15/2021')\n"],"sourceRoot":""}